@startuml
class org.example.app.services.UserDeleteService {
~ UserDeleteRepository repository
- {static} Logger LOGGER
+ String deleteUser(String[])
- Map<String,String> validateData(String[])
- User mapData(String[])
}
class org.example.app.utils.IdChecker {
+ {static} boolean isIdExists(int)
}
class org.example.app.views.AppView {
~ Scanner scanner
~ int option
+ int chooseOption()
+ void showMenu()
+ void getOutput(int,String)
}
class org.example.app.controllers.UserUpdateController {
~ UserUpdateView view
~ UserUpdateService service
+ void runSubMenu()
- void filterSubMenuChoice(int)
}
class org.example.app.exceptions.CreateException {
~ Map<String,String> errors
+ String getErrors(Map<String,String>)
}
class org.example.app.services.UserUpdateEmailService {
~ UserUpdateEmailRepository repository
- {static} Logger LOGGER
+ String updateUserEmail(String[])
- Map<String,String> validateData(String[])
- User mapData(String[])
}
class org.example.app.views.UserCreateView {
+ String[] getData()
+ void getOutput(String)
}
class org.example.app.services.UserUpdateAllService {
~ UserUpdateAllRepository repository
- {static} Logger LOGGER
+ String updateUser(String[])
- Map<String,String> validateData(String[])
- User mapData(String[])
}
class org.example.app.utils.AppStarter {
+ {static} void startApp()
}
class org.example.app.utils.Constants {
+ {static} String DB_DRIVER
+ {static} String DB_BASE_URL
+ {static} String DB_NAME
+ {static} String TABLE_USERS
+ {static} String DB_ABSENT_MSG
+ {static} String DATA_ABSENT_MSG
+ {static} String DATA_INSERT_MSG
+ {static} String DATA_UPDATE_MSG
+ {static} String DATA_DELETE_MSG
+ {static} String APP_CLOSE_MSG
+ {static} String INPUT_REQ_MSG
+ {static} String INCORRECT_VALUE_MSG
+ {static} String MENU_RETURN_MSG
+ {static} String EMPTY_USERNAME_MSG
+ {static} String PHONE_RGX
+ {static} String WRONG_PHONE_MSG
+ {static} String EMAIL_RGX
+ {static} String WRONG_EMAIL_MSG
+ {static} String ID_RGX
+ {static} String WRONG_ID_MSG
+ {static} String ID_NO_EXISTS_MSG
+ {static} String LOG_DB_ABSENT_MSG
+ {static} String LOG_DATA_INPTS_WRONG_MSG
+ {static} String LOG_DATA_ABSENT_MSG
+ {static} String LOG_DB_ERROR_MSG
}
class org.example.app.services.UserUpdateNameService {
~ UserUpdateNameRepository repository
- {static} Logger LOGGER
+ String updateUserName(String[])
- Map<String,String> validateData(String[])
- User mapData(String[])
}
class org.example.app.services.UserUpdateService {
+ void updateAllData()
+ void updateName()
+ void updatePhone()
+ void updateEmail()
+ void getNoSuchOption(int)
+ {static} boolean contains(int[],int)
}
class org.example.app.views.UserUpdateView {
~ Scanner scanner
~ int option
+ int chooseOption()
- void showSubMenu()
+ void getOutput(int,String)
}
class org.example.app.views.UserUpdateAllView {
+ String[] getData()
+ void getOutput(String)
}
class org.example.app.repositories.UserUpdateNameRepository {
- {static} Logger LOGGER
+ String updateName(User)
}
class org.example.app.controllers.UserDeleteController {
~ UserDeleteService service
~ UserDeleteView view
+ void deleteUser()
}
class org.example.app.utils.PhoneValidator {
+ {static} boolean isPhoneValid(String)
}
class org.example.app.repositories.UserUpdatePhoneRepository {
- {static} Logger LOGGER
+ String updatePhone(User)
}
class org.example.app.services.UserReadService {
~ UserReadRepository repository
- {static} Logger LOGGER
+ String readUsers()
}
class org.example.app.controllers.UserReadController {
~ UserReadService service
~ UserReadView view
+ void readUsers()
}
class org.example.app.exceptions.DBException {
}
class org.example.app.repositories.UserUpdateAllRepository {
- {static} Logger LOGGER
+ String updateUser(User)
}
class org.example.app.controllers.UserUpdatePhoneController {
~ UserUpdatePhoneService service
~ UserUpdatePhoneView view
+ void updateUserPhone()
}
class org.example.app.views.UserDeleteView {
+ String[] getData()
+ void getOutput(String)
}
class org.example.app.controllers.AppController {
~ AppView view
~ AppService service
+ void runApp()
- void filterChoice(int)
}
class org.example.app.repositories.UserDeleteRepository {
- {static} Logger LOGGER
+ String deleteUser(User)
}
class org.example.app.utils.IdValidator {
+ {static} boolean isIdValid(String)
}
class org.example.app.controllers.UserUpdateNameController {
~ UserUpdateNameService service
~ UserUpdateNameView view
+ void updateUserName()
}
class org.example.app.views.UserUpdatePhoneView {
+ String[] getData()
+ void getOutput(String)
}
class org.example.app.exceptions.OptionException {
}
class org.example.app.controllers.UserUpdateAllController {
~ UserUpdateAllService service
~ UserUpdateAllView view
+ void updateUser()
}
class org.example.app.views.UserUpdateNameView {
+ String[] getData()
+ void getOutput(String)
}
class org.example.app.repositories.UserReadRepository {
- {static} Logger LOGGER
+ List<User> readUsers()
}
class org.example.app.database.DBConn {
+ {static} Connection connect()
}
class org.example.app.utils.EmailValidator {
+ {static} boolean isEmailValid(String)
}
class org.example.app.App {
+ {static} void main(String[])
}
class org.example.app.views.UserUpdateEmailView {
+ String[] getData()
+ void getOutput(String)
}
class org.example.app.controllers.UserUpdateEmailController {
~ UserUpdateEmailService service
~ UserUpdateEmailView view
+ void updateUserEmail()
}
class org.example.app.database.DBCheck {
+ {static} boolean isDBExists()
}
class org.example.app.services.UserUpdatePhoneService {
~ UserUpdatePhoneRepository repository
- {static} Logger LOGGER
+ String updateUserPhone(String[])
- Map<String,String> validateData(String[])
- User mapData(String[])
}
class org.example.app.exceptions.DeleteException {
~ Map<String,String> errors
+ String getErrors(Map<String,String>)
}
class org.example.app.services.AppService {
+ void createUser()
+ void readUsers()
+ void updateUser()
+ void deleteUser()
+ void getNoSuchOption(int)
+ {static} boolean contains(int[],int)
}
class org.example.app.repositories.UserUpdateEmailRepository {
- {static} Logger LOGGER
+ String updateEmail(User)
}
class org.example.app.views.UserReadView {
+ void getOutput(String)
}
class org.example.app.exceptions.UpdateException {
~ Map<String,String> errors
+ String getErrors(Map<String,String>)
}
class org.example.app.entities.User {
- int id
- String name
- String phone
- String email
+ int getId()
+ void setId(int)
+ String getName()
+ void setName(String)
+ String getPhone()
+ void setPhone(String)
+ String getEmail()
+ void setEmail(String)
}
class org.example.app.controllers.UserCreateController {
~ UserCreateView view
~ UserCreateService service
+ void createUser()
}
class org.example.app.repositories.UserCreateRepository {
- {static} Logger LOGGER
+ String createUser(User)
}
class org.example.app.services.UserCreateService {
~ UserCreateRepository repository
- {static} Logger LOGGER
+ String createUser(String[])
- Map<String,String> validateData(String[])
- User mapData(String[])
}


org.example.app.exceptions.RuntimeException <|-- org.example.app.exceptions.CreateException
org.example.app.exceptions.Exception <|-- org.example.app.exceptions.DBException
org.example.app.exceptions.Exception <|-- org.example.app.exceptions.OptionException
org.example.app.exceptions.RuntimeException <|-- org.example.app.exceptions.DeleteException
org.example.app.exceptions.RuntimeException <|-- org.example.app.exceptions.UpdateException
@enduml